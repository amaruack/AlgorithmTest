package com.example.line;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

/**
 * 문제 설명
 * Joining a list [e1, e2, e3] with a delimiter d, results in [e1, d, e2, d, e3]. This function is extended in a way to take multiple delimiters [d1, d2] and generate [e1, d1, e2, d1, e3], [e1, d1, e2, d2, e3], [e1, d2, e2, d1, e3] and [e1, d2, e2, d2, e3].
 *
 * Note that there are L-1 (where L is the number of elements in the list) places to put any delimiter, and a place may have D (where D is the number of delimiters) possible delimiters independent from one another. Therefore DL-1 lists are generated by the extended join function.
 *
 * Implement the extended join function that takes delimiters and a list to generate all possible combinations of the joined
 * lists.
 *
 * Input
 * First, read delimiters from the first line of the standard input device.
 *
 * Next, read a list from the second line.
 *
 * Both the delimiter and the element of the list are printable characters in ASCII range.
 * All the delimiters are distinct.
 * .?      # delimiters, each character is a delimiter
 * abc     # list, each character is an element
 * Output
 * First, print the number of the joined lists in the first line of the standard output device.
 *
 * Next, print all the joined lists, each in a new line.
 *
 * The order of the lists matters and must be printed in the same order as the example below.
 * 4
 * a.b.c     # the first delimiter is used the first
 * a.b?c     # the last place varies the first
 * a?b.c
 * a?b?c
 */
public class Test01 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = ".?";
        String b = "abc";

        char[] delimiters = a.toCharArray();
        char[] chars = b.toCharArray();

        int totalLength = delimiters.length * delimiters.length;

        System.out.println(totalLength);

        for (int i = 0; i < totalLength; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < chars.length; j++) {
                sb.append(chars[j]);
                sb.append(delimiters[(i*j & i)%delimiters.length]);
//                if (i < delimiters.length) {
//                    sb.append(delimiters[(i&j)%delimiters.length]);
//                } else {
//                    sb.append(delimiters[(i|j)%delimiters.length]);
//                }
            }
            System.out.println(sb.deleteCharAt(sb.length()-1));
//            System.out.println(sb.toString());
        }

    }
}
